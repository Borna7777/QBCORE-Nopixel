{"version":3,"sources":["qplogo.png","components/CircularProgressBar/index.tsx","components/RepCards.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Direction","CircularProgressBar","_ref","maxValue","selectedValue","radius","strokeWidth","label","activeStrokeColor","inactiveStrokeColor","backgroundColor","textColor","labelFontSize","valueFontSize","withGradient","anticlockwise","initialAngularDisplacement","renderPie","i","DIRECTION","primaryRotationAngle","rotationTransformation","concat","dValue","value","x","Math","cos","PI","y","sin","long","generatePie","numberOfBars","angle","floor","calculatePieValue","activeColor","color","percent","R","parseInt","substring","G","B","RR","toString","length","GG","BB","shadeColor","fillColor","react_default","a","createElement","style","opacity","key","d","fill","transform","labelView","fontSize","textAnchor","textValueY","width","height","Object","toConsumableArray","Array","map","e","r","cx","cy","fontWeight","defaultProps","DEFAULT_RADIUS","RepCards","_Component","props","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","name","maxRep","Card","className","sx","maxWidth","components_CircularProgressBar","round","CardContent","Typography","gutterBottom","variant","component","data","labels","replace","_this","repLevels","selectedMenu","title","keys","metadata","buildCard","Component","App","closeMenu","_setMyState","display","fetch","method","headers","Content-Type","body","then","resp","json","_","_React$useState","React","useState","_React$useState2","slicedToArray","myState","keydownListener","event","listener","action","useEffect","window","addEventListener","src","logo","alt","id","onClick","Button","startIcon","ExitToApp_default","RepCards_RepCards","reportWebVitals","onPerfEntry","Function","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.3a14a5ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/qplogo.107bb8ef.png\";","import React from 'react';\r\n\r\nfunction shadeColor(color:any, percent:any) {\r\n    let R = parseInt(color.substring(1, 3), 16);\r\n    let G = parseInt(color.substring(3, 5), 16);\r\n    let B = parseInt(color.substring(5, 7), 16);\r\n\r\n    R = parseInt(`${(R * (100 + percent)) / 100}`, 10);\r\n    G = parseInt(`${(G * (100 + percent)) / 100}`, 10);\r\n    B = parseInt(`${(B * (100 + percent)) / 100}`, 10);\r\n\r\n    R = R < 255 ? R : 255;\r\n    G = G < 255 ? G : 255;\r\n    B = B < 255 ? B : 255;\r\n\r\n    const RR = R.toString(16).length === 1 ? `0${ R.toString(16)}` : R.toString(16);\r\n    const GG = G.toString(16).length === 1 ? `0${ G.toString(16)}` : G.toString(16);\r\n    const BB = B.toString(16).length === 1 ? `0${ B.toString(16)}` : B.toString(16);\r\n\r\n    return `#${ RR }${GG }${BB}`;\r\n}\r\n\r\nconst DEFAULT_RADIUS = 60;\r\nconst MAX_VALUE = 10;\r\n\r\nconst Direction = {\r\n    CLOCKSWISE: -1,\r\n    ANTI_CLOCKWISE: 1,\r\n};\r\n\r\ntype Props = {\r\n    maxValue?: number,\r\n    selectedValue?: number,\r\n    radius?: number,\r\n    strokeWidth?: number,\r\n    label?: string,\r\n    activeStrokeColor?: string,\r\n    inactiveStrokeColor?: string,\r\n    labelFontSize?: number,\r\n    valueFontSize?: number,\r\n    withGradient?: boolean,\r\n    anticlockwise?: boolean,\r\n    initialAngularDisplacement?: number,\r\n    backgroundColor?: string,\r\n    textColor?: string,\r\n};\r\n\r\nconst CircularProgressBar = ({\r\n    maxValue,\r\n    selectedValue,\r\n    radius,\r\n    strokeWidth,\r\n    label,\r\n    activeStrokeColor,\r\n    inactiveStrokeColor,\r\n    backgroundColor,\r\n    textColor,\r\n    labelFontSize,\r\n    valueFontSize,\r\n    withGradient,\r\n    anticlockwise,\r\n    initialAngularDisplacement,\r\n}:Props) => {\r\n// ----  PIE calculation funciton --------\r\n    const generatePie = (value:any) => {\r\n        const x = radius - Math.cos((2 * Math.PI) / (100 / value)) * radius;\r\n        const y = radius + Math.sin((2 * Math.PI) / (100 / value)) * radius;\r\n        const long = value <= 50 ? 0 : 1;\r\n        const d = `M${radius} ${radius} L${radius} ${0} A${radius} ${radius} 0 ${long} 1 ${y} ${x} Z`;\r\n\r\n        return d;\r\n    };\r\n\r\n    // ----  PIE Area calculation  --------\r\n    const calculatePieValue = (numberOfBars:any) => {\r\n        const angle = 360 / numberOfBars;\r\n        const pieValue = Math.floor(angle / 4);\r\n        return pieValue < 1 ? 1 : Math.floor(angle / 4);\r\n    };\r\n\r\n    // ----  PIE render funciton --------\r\n    const renderPie = (i:any) => {\r\n        const DIRECTION = anticlockwise ? Direction.ANTI_CLOCKWISE : Direction.CLOCKSWISE;\r\n        // Rotation Calculation\r\n        const primaryRotationAngle = (maxValue - 1) * (360 / maxValue);\r\n        const rotationAngle = DIRECTION * initialAngularDisplacement\r\n    + -1 * DIRECTION * primaryRotationAngle\r\n    + i * DIRECTION * primaryRotationAngle;\r\n        const rotationTransformation = `rotate(${rotationAngle}, ${radius}, ${radius})`;\r\n\r\n        const pieValue = calculatePieValue(maxValue);\r\n        const dValue = generatePie(pieValue);\r\n\r\n        const activeColor = withGradient\r\n            ? shadeColor(activeStrokeColor, ((i + 1) * maxValue) / 50)\r\n            : activeStrokeColor;\r\n\r\n        const fillColor = selectedValue > 0 && i <= selectedValue\r\n            ? activeColor : inactiveStrokeColor;\r\n\r\n        return (\r\n            <path\r\n                style={{ opacity: i === 0 ? 0 : 1 }}\r\n                key={i}\r\n                d={dValue}\r\n                fill={fillColor}\r\n                transform={rotationTransformation}\r\n            />\r\n        );\r\n    };\r\n\r\n    // ----  Creates a circle by combining the Pie(s) --------\r\n    const renderOuterCircle = () => [...Array(maxValue + 1)].map((e, i) => renderPie(i));\r\n\r\n    const labelView = (\r\n        <text\r\n            fill={textColor}\r\n            fontSize={labelFontSize}\r\n            x={radius}\r\n            y={radius + labelFontSize}\r\n            textAnchor=\"middle\"\r\n        >\r\n            {label}\r\n        </text>\r\n    );\r\n\r\n    const textValueY = label ? radius : radius + valueFontSize / 3;\r\n\r\n    // --------  MAIN Render --------\r\n    return (\r\n        <svg width={radius * 2} height={radius * 2}>\r\n            {renderOuterCircle()}\r\n\r\n            {/* This is the overlay circle */}\r\n            <circle r={radius - strokeWidth} cx={radius} cy={radius} fill={backgroundColor} />\r\n\r\n            <text\r\n                fill={textColor}\r\n                fontSize={valueFontSize}\r\n                fontWeight=\"bold\"\r\n                x={radius}\r\n                y={textValueY}\r\n                textAnchor=\"middle\"\r\n            >\r\n                {selectedValue}\r\n            </text>\r\n            {!!label.length && labelView}\r\n        </svg>\r\n    );\r\n};\r\n\r\nCircularProgressBar.defaultProps = {\r\n    maxValue: MAX_VALUE,\r\n    selectedValue: 0,\r\n    radius: DEFAULT_RADIUS,\r\n    strokeWidth: DEFAULT_RADIUS / 10,\r\n    label: '',\r\n    activeStrokeColor: '#05a168',\r\n    inactiveStrokeColor: '#ddd',\r\n    backgroundColor: '#fff',\r\n    textColor: '#000',\r\n    labelFontSize: Math.floor(DEFAULT_RADIUS / 3),\r\n    valueFontSize: Math.floor(DEFAULT_RADIUS / 2.5),\r\n    withGradient: false,\r\n    anticlockwise: false,\r\n    initialAngularDisplacement: 0,\r\n};\r\n\r\nexport default CircularProgressBar;\r\n","import React, { Component } from 'react';\r\nimport './RepCards.css';\r\nimport CircularProgressBar from \"./CircularProgressBar/index.tsx\";\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nexport class RepCards extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n       \r\n    }\r\n\r\n\r\n    buildCard(name, value, i, maxRep){\r\n        //console.log(name, value, i)\r\n        return (\r\n            \r\n            <Card className=\"card\" key={i} sx={{ maxWidth: 200 }}>\r\n                <div className=\"circularProgressBar\">\r\n                    <CircularProgressBar\r\n                        selectedValue={Math.round(value * 100) / 100}\r\n                        maxValue={maxRep}\r\n                        textColor='#f00'\r\n                        activeStrokeColor='#cc6600'\r\n                        withGradient\r\n                    />\r\n                </div>\r\n                \r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                    {name}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        {this.props.data.labels['LABEL_CARD'].replace('%number%',Math.round(value * 100) / 100)}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n \r\n        )\r\n    }\r\n\r\n    render() {\r\n        //console.log('his.props.data',this.props, this.props.data.labels['TITLE_MENU'])\r\n        return(\r\n            <div className=\"RepCards\">\r\n                <div className=\"RepCardsTitle\">\r\n                    <h1 className=\"RepCardsTitleH1\">{this.props.data && this.props.data.repLevels[this.props.selectedMenu] ? this.props.data.labels['TITLE_MENU'].replace('%title%',this.props.data.repLevels[this.props.selectedMenu].title) : ''}</h1>\r\n                </div>\r\n                <div className=\"RepCardsBody\">\r\n                    {Object.keys(this.props.data.repLevels[this.props.selectedMenu].metadata).map((name, i) => {\r\n                        return this.buildCard(name, this.props.data.repLevels[this.props.selectedMenu].metadata[name] ,i, this.props.data.maxRep)\r\n                    })}\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n}","import React from 'react';\nimport logo from './qplogo.png';\nimport './App.css';\nimport {RepCards} from './components/RepCards.js';\nimport Button from '@mui/material/Button';\nimport ExitToApp from '@mui/icons-material/ExitToApp';\n\n\nfunction App() {\n  function linkClick(e,i) {\n    //console.log('click',e,i)\n    _setMyState({ \n      display : myState.display,\n      data : myState.data,\n      selectedMenu: e,\n      \n    })\n  }\n\n  function closeMenu() {\n    _setMyState({ \n      display: 'none',\n      selectedMenu: 0,\n      data: {}\n    });\n    fetch(`https://qp-reputation/closeMenu`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json; charset=UTF-8\" },\n        body: \"\"\n    }).then(resp => resp.json()).then(_ => {});\n  }\n\n  const [myState, _setMyState] = React.useState({\n                                                  display : 'none',\n                                                  data : {},\n                                                  selectedMenu : 0\n                                                });\n\n  const keydownListener = (event) => {\n    if (event.key == \"Escape\" || event.key == \"Backspace\") {\n        closeMenu()\n    }\n  }\n\n  const listener = (event) => {\n    switch(event.data.action) {\n        case \"open\":\n          //console.log('OPEN')\n            //AppOpen(event.data);\n            _setMyState({ \n              display: 'flex',\n              selectedMenu: 0,\n              data: event.data\n            });\n            // _setMyState({ \n            //   display: 'flex',\n            //   selectedMenu: 0,\n            //   data: { \n            //     action : 'OPEN',\n            //     maxRep : 100,\n            //     repLevels: {\n            //       [0] : {\n            //           title : 'Legal Jobs',\n            //           metadata : {\n            //             tailorep : 5,\n            //             restaurantrep : 1,\n            //             miningrep : 0.2,\n            //             sdsd : 12.2,\n            //             miaaaningrep : 2.26799999999999,\n            //             fgggg : 10\n            //           }\n            //       },\n            //       [1] : {\n            //           title : 'Ilegal Jobs',\n            //           metadata : {\n            //             drugsrep : 2\n            //           }\n            //       }\n            //     },\n            //     labels: {\n            //       ['LABEL_CARD'] : 'Your reputation is %number% points in 100',\n            //       ['TITLE_MENU'] : 'Reputations Values for Menu %title%',\n            //       ['TITLE_EXIT'] : 'Exit',\n            //     }\n            //   }\n            // });\n            \n            break;\n        case \"close\":\n          //console.log('CLOSE')\n            //AppClose();\n            _setMyState({ \n              display: 'none',\n              selectedMenu: 0,\n              data: {}\n            });\n            \n            break;\n    }\n \n  };\n\n  React.useEffect(() => {\n    window.addEventListener(\"message\", listener);\n    window.addEventListener(\"keydown\", keydownListener);\n  }, []);\n\n  if (myState.data && myState.data.repLevels) {\n    return (\n      <div className=\"App\" style={{ 'display': myState.display }} >\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div className=\"App-menu\">\n            {Object.keys(myState.data.repLevels).map((id, i) => {\n                return <a className={myState.selectedMenu == id ? \"App-link App-link-selected\":\"App-link\"} \n                          key={id} \n                          onClick={() =>linkClick(id,i)}>{myState.data.repLevels[id].title}\n                        </a>\n            })}\n          </div>\n          <div className='App-menu-footer'>\n            <Button variant=\"outlined\" startIcon={<ExitToApp />} onClick={() => closeMenu()}>\n              {myState.data.labels['TITLE_EXIT']}\n            </Button>\n          </div>\n        </header>\n        <RepCards data={myState.data} selectedMenu={myState.selectedMenu}/>\n        \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n\n// window.addEventListener('message', function(event) {\n//   console.log(event.data.action)\n//     switch(event.data.action) {\n//         case \"open\":\n//           console.log('OPEN')\n//             //AppOpen(event.data);\n//             this.setState({ \n//               display: 'block',\n//               data: event.data\n//             });\n            \n//             break;\n//         case \"close\":\n//           console.log('CLOSE')\n//             //AppClose();\n//             this.setState({ \n//               display: 'none',\n//               data: {}\n//             });\n            \n//             break;\n//     }\n// })\n\n// class App extends Component {\n\n//   constructor(props) {\n//       super(props);\n//       this.state = {\n//         display : 'none',\n//         data : {}\n//       }\n//   }\n\n//   render() {\n//       return(\n//         <div className=\"App\" style={{ 'display': this.state.display }} >\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//           <RepCards data={this.state.data}/>\n//         </header>\n//       </div>\n//       )\n//   }\n\n// }\n\n// export default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}